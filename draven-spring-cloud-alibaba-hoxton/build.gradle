buildscript {
    ext {//类似于固定参数
        set('springCloudVersion', "Hoxton.SR3")
        set('springCloudAlibabaVersion', "2.2.1.RELEASE")
        set('springBootVersion', "2.2.8.RELEASE")
    }

    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
        maven { url 'https://repo1.maven.org/maven2/' }
        mavenCentral()
    }

}
plugins {
    id 'org.springframework.boot' version '2.2.8.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    //id 'springCloudAlibabaVersion' version '2.2.1.RELEASE'
    id 'java'
}
allprojects {
    group = 'com.draven.cloud.alibaba'
    version = 'Draven1.0'
    apply plugin: 'java'
    sourceCompatibility = '1.8'
}

subprojects {
    apply plugin: 'java'
    /* 注意gradle插件不再自动应用，所以这里需要指定 */
    apply plugin: 'org.springframework.boot'
    /* 依赖管理插件仍然是一个spring-boot-gradle-plugin传递依赖，所以无需在build.gradle配置中明确列出此依赖。 */
    apply plugin: 'io.spring.dependency-management' /* 依赖管理，用来传递spring的依赖 */
    //apply plugin: 'springCloudAlibabaVersion' /* 依赖管理，用来传递spring的依赖 */
    /* 指定jdk版本 */
    sourceCompatibility = '1.8'
    /* java编译的时候缺省状态下会因为中文字符而失败 */
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    dependencyManagement {
        imports {
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
    /*dependencies {
        //classpath {
        //    "org.springframework.boot:spring-boot-gradle-plugun:2.2.8.RELEASE"
        //}
        implementation 'org.springframework.boot:spring-boot-starter-web'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        //------spring boot
        //整合web
        implementation 'org.springframework.boot:spring-boot-starter-web'
        //整合 aop
        implementation 'org.springframework.boot:spring-boot-starter-aop'
        //整合 actuator
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        // 整合 feign
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

        //--------spring cloud alibaba 依赖
        // nacos 服务中心依赖
        implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery'
        //整合 sentinel
        implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-sentinel'
        implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-seata'


        //JWT token 工具依赖
        compile 'io.jsonwebtoken:jjwt-api:0.11.1'
        runtime 'io.jsonwebtoken:jjwt-impl:0.11.1'
        runtime 'io.jsonwebtoken:jjwt-jackson:0.11.1'
        //spring boot test
        testCompile 'org.springframework.boot:spring-boot-starter-test'
        //lombok
        compileOnly 'org.projectlombok:lombok:1.18.8'
        // Use JUnit test framework
        testImplementation 'junit:junit:4.12'
    }*/
}


/*dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}*/

test {
    useJUnitPlatform()
}
